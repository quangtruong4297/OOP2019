package tilegame.entities.creatures;

import tilegame.Handler;
import tilegame.gfx.Animation;
import tilegame.gfx.Assets;
import tilegame.items.Item;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Random;

/**
 * Created by BanhBaoMocMeo on 11/23/2017.
 */
public class Monster extends Creature {
    protected Hero hero;
    protected Animation animation_down, animation_up, animation_left, animation_right;
    protected Animation attack_down, attack_up, attack_left, attack_right;
    protected Rectangle scope;
    protected boolean attacking;
    protected int startX, startY, desX, desY, dich;
    protected BufferedImage curFrame;

    protected static final int MAX_HEALTH = 3;

    public Monster(Handler handler, float x, float y, int desX, int desY) {
        super(handler, x, y, DEFAULT_CREATURE_WIDTH, DEFAULT_CREATURE_HEIGHT);
        scope = new Rectangle((-2 * DEFAULT_CREATURE_WIDTH), (-2 * DEFAULT_CREATURE_HEIGHT),
                5 * DEFAULT_CREATURE_WIDTH, 5 * DEFAULT_CREATURE_HEIGHT);
        this.startX = (int) x;
        this.startY = (int) y;
        this.desX = desX;
        this.desY = desY;
        damage = 1;
        setOrient();
        speed /= 2;
        animation_left = new Animation(120, Assets.monster_left);
        animation_right = new Animation(120, Assets.monster_right);
        animation_down = new Animation(120, Assets.monster_down);
        animation_up = new Animation(120, Assets.monster_up);

        attack_left = new Animation(120, Assets.monster_left);
        attack_right = new Animation(120, Assets.monster_right);
        attack_down = new Animation(120, Assets.monster_down);
        attack_up = new Animation(120, Assets.monster_up);

        bounds.x = width / 4;
        bounds.y = height / 2;
        bounds.width = width / 2;
        bounds.height = height / 2;
        health = MAX_HEALTH;
    }

    protected void setOrient() {
        if (startX == desX) {
            dir = CreatureDir.up;
            dich = desY;
        }
        if (startY == desY) {
            dir = CreatureDir.right;
            dich = desX;
        }
    }

    protected int tempTrangThai = 1;

    //1: canh, 2: combat, 3: tu combat ve canh.
    protected void setTempTrangThai() {
        if(hero == null) 
            hero = handler.getWorldManager().getWorld().getEntityManager().getHero();
        if (getCollisionScope(0, 0).intersects(hero.getCollisionBounds(0, 0))) {
            tempTrangThai = 2;
            attacking = true;
        } else if (attacking == true) {
            tempTrangThai = 3;
            if (startY == y && startX == x) {
                attacking = false;
            }
        } else
            tempTrangThai = 1;
    }

    protected void guard() {
        if (dir == CreatureDir.right && dich == desX) {
            xMove = +speed;
            yMove = 0;
            if (x == dich) {
                dich = startX;
                dir = CreatureDir.left;
            }
        }
        if (dir == CreatureDir.left && dich == startX) {
            xMove = -speed;
            yMove = 0;
            if (x == dich) {
                dich = desX;
                dir = CreatureDir.right;
            }
        }
        if (dir == CreatureDir.down && dich == startY) {
            xMove = 0;
            yMove = +speed;
            if (y == dich) {
                dich = desY;
                dir = CreatureDir.up;
            }
        }
        if (dir == CreatureDir.up && dich == desY) {
            xMove = 0;
            yMove = -speed;
            if (y == dich) {
                dich = startY;
                dir = CreatureDir.down;
            }
        }
    }

    protected void backtrack() {
        if (x >= startX - speed && x <= startX + speed) {
            xMove = 0;
            x = startX;
        } else if (x > startX + speed) {
            xMove = -speed;
            dir = CreatureDir.left;
        } else if (x < startX - speed) {
            xMove = +speed;
            dir = CreatureDir.right;
        }

        if (y >= startY - speed && y <= startY + speed) {
            yMove = 0;
            y = startY;
        } else if (y > startY + speed) {
            yMove = -speed;
            if (xMove == 0) dir = CreatureDir.up;
        } else if (y < startY - speed) {
            yMove = +speed;
            if (xMove == 0) dir = CreatureDir.down;
        }

        if (x == startX && y == startY)
            setOrient();
    }


    protected void combat() {
        if(hero == null) 
            hero = handler.getWorldManager().getWorld().getEntityManager().getHero();
        xMove = yMove = 0;
        int heroX = (int) hero.getX();
        int heroY = (int) hero.getY();
        if (heroX - this.x > speed) {
            this.xMove = speed;
            dir = CreatureDir.right;
            if (heroY - this.y > speed) {
                this.yMove = speed;
            } 
            else if (heroY - this.y < -speed) {
                this.yMove = -speed;
            } 
        }
        else if (heroX - this.x < -speed) {
            this.xMove = -speed;
            dir = CreatureDir.left;
            if (heroY - this.y > speed) {
                this.yMove = speed;
            }
            if (heroY - this.y < -speed) {
                this.yMove = -speed;
            }
        }
        else {
            if (heroY - this.y > speed) {
                this.yMove = speed;
                dir = CreatureDir.down;
            } 
            else if (heroY - this.y < -speed) {
                this.yMove = -speed;
                dir = CreatureDir.up;
            }
        }
    }

    boolean hurt;
    long preTime = System.currentTimeMillis();
    long curTime = System.currentTimeMillis();

    protected void slash() {
        if(hero == null) 
            hero = handler.getWorldManager().getWorld().getEntityManager().getHero();
        if (meleeKombat().intersects(hero.getCollisionBounds(0, 0))) {
            if (hurt) {
                curTime = System.currentTimeMillis();
                if (curTime - preTime > 300) {
                    hero.hurt(damage);
                    preTime = System.currentTimeMillis();
                }
            }
            hurt = true;
        } else {
            hurt = false;
            preTime = System.currentTimeMillis();
        }
    }

    protected Rectangle meleeKombat() {
        return new Rectangle((int) (x + bounds.x - 3), (int) (y + bounds.y - 3), bounds.width + 6, bounds.height + 6);
    }

    @Override
    public void tick() {
        hero = handler.getWorldManager().getWorld().getEntityManager().getHero();
        setTempTrangThai();
        if (tempTrangThai == 1) 
            guard();
        else if (tempTrangThai == 2) {
            combat();
            slash();
        } 
        else backtrack();

        move();
        animation_up.tick();
        animation_down.tick();
        animation_right.tick();
        animation_left.tick();
    }

    @Override
    public void render(Graphics g) {
        curFrame = getCurrentAnimationFrame();
        int rx = (int) (x - handler.getGameCamera().getxOffset());
        int ry = (int) (y - handler.getGameCamera().getyOffset());
        healthBar(g, rx, ry);
        g.drawImage(curFrame, rx, ry, width, height, null);

    }


    protected void healthBar(Graphics g, int rx, int ry) {
        if (health > MAX_HEALTH / 3)
            g.setColor(Color.green);
        else
            g.setColor(Color.red);
        g.fillRoundRect(rx, ry - 10, width * health / MAX_HEALTH, 7, 6, 6);

        g.setColor(Color.black);
        g.drawRoundRect(rx, ry - 10, width, 7, 6, 6);
    }


    public void die() {
    	Random rd = new Random();
    	int iditem = rd.nextInt(4);
    	switch (iditem) {
			case 0:
				handler.getWorldManager().getWorld().getItemManager().addItem(Item.heartitem.createNew((int)x, (int)y + height/2, 5));
				break;
			case 1:
				handler.getWorldManager().getWorld().getItemManager().addItem(Item.manaitem.createNew((int)x, (int)y + height/2, 5));
				break;
			case 2:
				handler.getWorldManager().getWorld().getItemManager().addItem(Item.Severrumitem.createNew((int)x, (int)y + height/2, 5));
				break;
			case 3:
				handler.getWorldManager().getWorld().getItemManager().addItem(Item.Calibrumitem.createNew((int)x, (int)y + height/2, 5));
				break;
			case 4:
				handler.getWorldManager().getWorld().getItemManager().addItem(Item.Infernumitem.createNew((int)x, (int)y + height/2, 5));
				break;
		}
    }

    protected Rectangle getCollisionScope(float xOffset, float yOffset) {
        return new Rectangle((int) (x + scope.x + xOffset), (int) (y + scope.y + yOffset), scope.width, scope.height);
    }

    protected BufferedImage getCurrentAnimationFrame() {
        if (dir == CreatureDir.left) {
            if (xMove != 0)
                return animation_left.getCurrentFrame();
            else
                return Assets.monster_left[0];
        } else if (dir == CreatureDir.right) {
            if (xMove != 0)
                return animation_right.getCurrentFrame();
            else
                return Assets.monster_right[0];
        } else if (dir == CreatureDir.up) {
            if (yMove != 0)
                return animation_up.getCurrentFrame();
            else
                return Assets.monster_up[0];
        } else if (dir == CreatureDir.down) {
            if (yMove != 0)
                return animation_down.getCurrentFrame();
            else
                return Assets.monster_down[0];
        }
        return null;
    }
}
