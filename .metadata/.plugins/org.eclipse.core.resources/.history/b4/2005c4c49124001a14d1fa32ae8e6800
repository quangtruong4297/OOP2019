package tilegame;

import tilegame.display.Display;
import tilegame.entities.creatures.Hero;
import tilegame.gfx.Assets;
import tilegame.gfx.GameCamera;

import tilegame.input.KeyManager;
import tilegame.input.MouseManager;

import tilegame.states.EndState;
import tilegame.states.GameState;
import tilegame.states.MenuState;
import tilegame.states.State;

import java.awt.*;
import java.awt.image.BufferStrategy;

/**
 * Created by BanhBaoMocMeo on 11/21/2017.
 */
public class Game implements Runnable{
    private Display display;
    private int width, height;
    private String title;

    private Thread thread;
    private boolean running = false;

    private BufferStrategy bs;
    private Graphics g;
    private Hero hero;

    //States
    public State gameState;
    public State menuState;
    public State endState;

    //Input
    private KeyManager keyManager;
    private MouseManager mouseManager;
    
    //Camera
    private GameCamera gameCamera;

    //tilegame.Handler
    private Handler handler;

    public Game(String title, int width, int height) {
        this.width = width;
        this.height = height;
        this.title = title;
        keyManager = new KeyManager();
        mouseManager = new MouseManager();
    }

    private void init() {
        display = new Display(title, width, height);

        display.getFrame().addKeyListener(keyManager);
        display.getFrame().addMouseListener(mouseManager);
        display.getFrame().addMouseMotionListener(mouseManager);
        display.getCanvas().addMouseListener(mouseManager);
        display.getCanvas().addMouseMotionListener(mouseManager);
        Assets.init();

        handler = new Handler(this);
        gameCamera = new GameCamera(handler, 0, 0);

        menuState = new MenuState(handler);
        gameState = new GameState(handler);
        State.setState(menuState);
    }

    @Override
    public void run() {
        init();
        int fps = 60;
        double timePerTick = 1000000000 / fps;
        double delta = 0;
        long now;
        long lastTime = System.nanoTime();
        long timer = 0;
        int ticks = 0;

        while(running) {
            now = System.nanoTime();
            delta += (now - lastTime) / timePerTick;
            timer += now - lastTime;
            lastTime = now;

            if(delta >= 1){
                tick();
                render();
                ticks++;
                delta--;
            }

            if(timer >= 1_000_000_000) {
                System.out.println("Ticks and Frames: "+ticks);
                int heroX = (int) hero.getX();
                int heroY = (int) hero.getY();
                System.out.println("hero:x= " +heroX +heroY);
                ticks = 0;
                timer = 0;
            }
        }
        stop();
    }

    private void tick() {
        if(handler.getWorldManager().getBossKilled() == 3 ||
                handler.getWorldManager().getHero().getHealth() < 0){
            if(endState == null){
                endState = new EndState(handler);
            }else {
                State.setState(endState);
            }
        }
        keyManager.tick();

        if(State.getState() != null){
            State.getState().tick();
        }
    }

    private void render() {
        bs = display.getCanvas().getBufferStrategy();
        if(bs == null) {
            display.getCanvas().createBufferStrategy(3);
            return;
        }
        g = bs.getDrawGraphics();

        //CLEAR SCREEN
        g.clearRect(0, 0, width, height);
        //DRAW HERE

        if(State.getState() != null) {
            State.getState().render(g);
        }

        //END DRAWING
        bs.show();
        g.dispose();
    }

    public synchronized void start() {
        if(running)
            return;
        running = true;
        thread = new Thread(this);
        thread.start();

    }

    public synchronized void stop() {
        if(!running)
            return;
        running = false;
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }

    //GETTERS
    public KeyManager getKeyManager() {
        return keyManager;
    }

    public MouseManager getMouseManager() {
        return mouseManager;
    }

    public GameCamera getGameCamera() {
        return gameCamera;
    }

    public int getWidth() {
        return width;
    }

    public int getHeight() {
        return height;
    }

}
